What is JavaScriptExecutor?
JavaScriptExecutor is an Interface that helps to execute JavaScript through Selenium Webdriver. 
JavaScriptExecutor provides two methods “executescript” & “executeAsyncScript” to run javascript on the selected window or current page.

***************************************************

Why do we need JavaScriptExecutor?

In Selenium Webdriver, locators like XPath, CSS, etc. are used to identify and perform operations on a web page.

In case, these locators do not work you can use JavaScriptExecutor.
 You can use JavaScriptExecutor to perform a desired operation on a web element.

Selenium supports javaScriptExecutor. There is no need for an extra plugin or add-on. 
You just need to import (org.openqa.selenium.JavascriptExecutor) in the script as to use JavaScriptExecutor.


Sometimes Selenium gives incorrect results due to unexpected actions that occur while running a script. 
Say there is a popup when we open a website. Due to this Selenium cannot find the specific element which we recorded 
in the script and it throws an error or incorrect result.

For example:

In general, we do click on an element using the click() method in Selenium.
Sometimes web controls don’t react well against Selenium commands and we may face issues with the above statement “click()“.
As said earlier, to overcome such kind of situation, we use the JavaScriptExecutor interface.

There is no need to write a separate script to execute JavaScript within the browser using the Selenium WebDriver script. 
Just use a predefined interface named ‘JavaScriptExecutor‘.





********************************************************
Sample code Snippet:

//datatype varibalename=(lefthandsidedatatype)variablename;
JavascriptExecutor js =(JavascriptExecutor)driver;
js.executeScript(Script,Arguments);

Script – The JavaScript to execute

Example: Suppose  we need to click on a webelement on webpage 
   js.executeScript("arguments[0].click()", WebElement);
//
   js.executeScript("location.reload()")


Arguments – The arguments to the script(Optional). May be empty.
Returns – One of Boolean, Long, List, String,WebElement, or null.


JavaScriptExecutor provides two methods “executescript” & “executeAsyncScript” to handle.
Executed the JavaScript using Selenium Webdriver.
Illustrated how to click on an element through JavaScriptExecutor, if selenium fails to click on element due to some issue.

**********************************************************


JavaScript, however, in anonymous functions in JavaScript, we use only the function keyword without the function name.

An anonymous function is not accessible after its initial creation,
it can only be accessed by a variable it is stored in as a function as a value.
An anonymous function can also have multiple arguments, but only one expression.


//How to refresh a page without refresh methdod()

//how to pass the value without sendkeys()

//how to click action wwithout click()

//how to scroll down and scroll up without selenium code







JavaScriptExecutor Code:



package alltestngkeywords;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;



import io.github.bonigarcia.wdm.WebDriverManager;

public class JavaScriptExecutorConcept {
	public WebDriver driver=null;
	WebDriverWait wait=null;
	
	JavascriptExecutor jse=null;
	
	@BeforeClass
	public void launcingLinkedin() {
		//How to disable the notifications while automation our application
		 ChromeOptions ops = new ChromeOptions();
        ops.addArguments("--disable-notifications");
		
		WebDriverManager.chromedriver().setup();
		driver=new ChromeDriver(ops);
		driver.get("https://www.instagram.com/");
		//maximize the window
		driver.manage().window().maximize();
		
	}
	
	@Test
	public void searchKeyWord() throws InterruptedException {
		jse= (JavascriptExecutor)driver;
		wait= new WebDriverWait(driver,Duration.ofSeconds(5000));
		//get the page Title
		String title="Instagram";
		
		//wait for the page title
		wait.until(ExpectedConditions.titleIs(title));
		//refresh the page using javascript excecutor
		 jse.executeScript("location.reload()");
		 Thread.sleep(5000);
		Assert.assertEquals(driver.getTitle(), title, "Title not matched with actual behaviour");
		
		WebElement faceBookLoginWithLink=driver.findElement(By.xpath("//span[text()='Log in with Facebook']"));
		
		
		//click on log in with facebook link using JavaScriptExecutor
		 jse.executeScript("arguments[0].click()", faceBookLoginWithLink);
		 Thread.sleep(5000);
	   //verify the page title
		 wait.until(ExpectedConditions.titleIs("Log in to Facebook | Facebook"));
		
		 
		 
		//pass the value to email edit box using JavscriptExecutor
		 WebElement emailEditBox=driver.findElement(By.id("email"));
		 jse.executeScript("arguments[0].value='6281726564'",emailEditBox);
		 Thread.sleep(5000);
		 
		//pass the value and heightlet the background to password  edit box
		 WebElement passwordEditBox=driver.findElement(By.id("pass"));
		 jse.executeScript("arguments[0].setAttribute('style','background:yellow;border:solid 5px red')",passwordEditBox);
		 jse.executeScript("arguments[0].value='venky@5208'",passwordEditBox);
		 Thread.sleep(5000);
		 
		 //click on login button
		 WebElement loginButton=driver.findElement(By.name("login"));
		 jse.executeScript("arguments[0].click()", loginButton);
		 System.out.println(driver);
		//driver.switchTo().alert().dismiss();
		//driver.findElement(By.xpath("//button[text()='Not Now']")).click();
		 Thread.sleep(15000);
		 wait.until(ExpectedConditions.titleIs("Instagram"));
		
		 //scroll down and up using javascript executor based on pixel size
		  jse.executeScript("window.scrollBy(0,3000)", "");
		  Thread.sleep(3000);
		  jse.executeScript("window.scrollBy(0,-2500)", "");
		  Thread.sleep(3000);
		  
		
		  //scroll the page until WebElement is visible
		 // jse.executeScript("arguments[0].scrollIntoView();",element);
		  
		  
		
		  
		  
		 driver.close();
		 
		
	}

}












